<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.AspNetCore.JsonPatch</name>
    </assembly>
    <members>
        <member name="T:Microsoft.AspNetCore.JsonPatch.Adapters.AdapterFactory">
            <summary>
            The default AdapterFactory to be used for resolving <see cref="T:Microsoft.AspNetCore.JsonPatch.Internal.IAdapter"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Adapters.AdapterFactory.Create(System.Object,Newtonsoft.Json.Serialization.IContractResolver)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNetCore.JsonPatch.Adapters.IAdapterFactory">
            <summary>
            Defines the operations used for loading an <see cref="T:Microsoft.AspNetCore.JsonPatch.Internal.IAdapter"/> based on the current object and ContractResolver.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Adapters.IAdapterFactory.Create(System.Object,Newtonsoft.Json.Serialization.IContractResolver)">
            <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.JsonPatch.Internal.IAdapter"/> for the current object
            </summary>
            <param name="target">The target object</param>
            <param name="contractResolver">The current contract resolver</param>
            <returns>The needed <see cref="T:Microsoft.AspNetCore.JsonPatch.Internal.IAdapter"/></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.JsonPatch.Adapters.IObjectAdapter">
            <summary>
            Defines the operations that can be performed on a JSON patch document.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Adapters.IObjectAdapter.Add(Microsoft.AspNetCore.JsonPatch.Operations.Operation,System.Object)">
             <summary>
             Using the "add" operation a new value is inserted into the root of the target
             document, into the target array at the specified valid index, or to a target object at
             the specified location.
            
             When adding to arrays, the specified index MUST NOT be greater than the number of elements in the array.
             To append the value to the array, the index of "-" character is used (see [RFC6901]).
            
             When adding to an object, if an object member does not already exist, a new member is added to the object at the
             specified location or if an object member does exist, that member's value is replaced.
            
             The operation object MUST contain a "value" member whose content
             specifies the value to be added.
            
             For example:
            
             { "op": "add", "path": "/a/b/c", "value": [ "foo", "bar" ] }
            
             See RFC 6902 <see href="https://tools.ietf.org/html/rfc6902#page-4"/>
             </summary>
             <param name="operation">The add operation.</param>
             <param name="objectToApplyTo">Object to apply the operation to.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Adapters.IObjectAdapter.Copy(Microsoft.AspNetCore.JsonPatch.Operations.Operation,System.Object)">
             <summary>
              Using the "copy" operation, a value is copied from a specified location to the
              target location.
            
              The operation object MUST contain a "from" member, which references the location in the
              target document to copy the value from.
            
              The "from" location MUST exist for the operation to be successful.
            
              For example:
            
              { "op": "copy", "from": "/a/b/c", "path": "/a/b/e" }
            
             See RFC 6902 <see href="https://tools.ietf.org/html/rfc6902#page-7"/>
             </summary>
             <param name="operation">The copy operation.</param>
             <param name="objectToApplyTo">Object to apply the operation to.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Adapters.IObjectAdapter.Move(Microsoft.AspNetCore.JsonPatch.Operations.Operation,System.Object)">
             <summary>
             Using the "move" operation the value at a specified location is removed and
             added to the target location.
            
             The operation object MUST contain a "from" member, which references the location in the
             target document to move the value from.
            
             The "from" location MUST exist for the operation to be successful.
            
             For example:
            
             { "op": "move", "from": "/a/b/c", "path": "/a/b/d" }
            
             A location cannot be moved into one of its children.
            
             See RFC 6902 <see href="https://tools.ietf.org/html/rfc6902#page-6"/>
             </summary>
             <param name="operation">The move operation.</param>
             <param name="objectToApplyTo">Object to apply the operation to.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Adapters.IObjectAdapter.Remove(Microsoft.AspNetCore.JsonPatch.Operations.Operation,System.Object)">
             <summary>
             Using the "remove" operation the value at the target location is removed.
            
             The target location MUST exist for the operation to be successful.
            
             For example:
            
             { "op": "remove", "path": "/a/b/c" }
            
             If removing an element from an array, any elements above the
             specified index are shifted one position to the left.
            
             See RFC 6902 <see href="https://tools.ietf.org/html/rfc6902#page-6"/>
             </summary>
             <param name="operation">The remove operation.</param>
             <param name="objectToApplyTo">Object to apply the operation to.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Adapters.IObjectAdapter.Replace(Microsoft.AspNetCore.JsonPatch.Operations.Operation,System.Object)">
             <summary>
             Using the "replace" operation the value at the target location is replaced
             with a new value.  The operation object MUST contain a "value" member
             which specifies the replacement value.
            
             The target location MUST exist for the operation to be successful.
            
             For example:
            
             { "op": "replace", "path": "/a/b/c", "value": 42 }
            
             See RFC 6902 <see href="https://tools.ietf.org/html/rfc6902#page-6"/>
             </summary>
             <param name="operation">The replace operation.</param>
             <param name="objectToApplyTo">Object to apply the operation to.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.JsonPatch.Adapters.IObjectAdapterWithTest">
            <summary>
            Defines the operations that can be performed on a JSON patch document, including "test".
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Adapters.IObjectAdapterWithTest.Test(Microsoft.AspNetCore.JsonPatch.Operations.Operation,System.Object)">
             <summary>
             Using the "test" operation a value at the target location is compared for
             equality to a specified value.
            
             The operation object MUST contain a "value" member that specifies
             value to be compared to the target location's value.
            
             The target location MUST be equal to the "value" value for the
             operation to be considered successful.
            
             For example:
             { "op": "test", "path": "/a/b/c", "value": "foo" }
            
             See RFC 6902 <see href="https://tools.ietf.org/html/rfc6902#page-7"/>
             </summary>
             <param name="operation">The test operation.</param>
             <param name="objectToApplyTo">Object to apply the operation to.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.JsonPatch.Adapters.ObjectAdapter">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Adapters.ObjectAdapter.#ctor(Newtonsoft.Json.Serialization.IContractResolver,System.Action{Microsoft.AspNetCore.JsonPatch.JsonPatchError})">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.AspNetCore.JsonPatch.Adapters.ObjectAdapter"/>.
            </summary>
            <param name="contractResolver">The <see cref="T:Newtonsoft.Json.Serialization.IContractResolver"/>.</param>
            <param name="logErrorAction">The <see cref="T:System.Action"/> for logging <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchError"/>.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Adapters.ObjectAdapter.#ctor(Newtonsoft.Json.Serialization.IContractResolver,System.Action{Microsoft.AspNetCore.JsonPatch.JsonPatchError},Microsoft.AspNetCore.JsonPatch.Adapters.IAdapterFactory)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.AspNetCore.JsonPatch.Adapters.ObjectAdapter"/>.
            </summary>
            <param name="contractResolver">The <see cref="T:Newtonsoft.Json.Serialization.IContractResolver"/>.</param>
            <param name="logErrorAction">The <see cref="T:System.Action"/> for logging <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchError"/>.</param>
            <param name="adapterFactory">The <see cref="T:Microsoft.AspNetCore.JsonPatch.Adapters.IAdapterFactory"/> to use when creating adaptors.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Adapters.ObjectAdapter.ContractResolver">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.IContractResolver"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Adapters.ObjectAdapter.AdapterFactory">
            <summary>
            Gets or sets the <see cref="T:Microsoft.AspNetCore.JsonPatch.Adapters.IAdapterFactory"/>
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Adapters.ObjectAdapter.LogErrorAction">
            <summary>
            Action for logging <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchError"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Adapters.ObjectAdapter.Add(System.String,System.Object,System.Object,Microsoft.AspNetCore.JsonPatch.Operations.Operation)">
            <summary>
            Add is used by various operations (eg: add, copy, ...), yet through different operations;
            This method allows code reuse yet reporting the correct operation on error
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Adapters.ObjectAdapter.Remove(System.String,System.Object,Microsoft.AspNetCore.JsonPatch.Operations.Operation)">
            <summary>
            Remove is used by various operations (eg: remove, move, ...), yet through different operations;
            This method allows code reuse yet reporting the correct operation on error.  The return value
            contains the type of the item that has been removed (and a bool possibly signifying an error)
            This can be used by other methods, like replace, to ensure that we can pass in the correctly
            typed value to whatever method follows.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.JsonPatch.Helpers.GetValueResult">
            <summary>
            Return value for the helper method used by Copy/Move.  Needed to ensure we can make a different
            decision in the calling method when the value is null because it cannot be fetched (HasError = true)
            versus when it actually is null (much like why RemovedPropertyTypeResult is used for returning
            type in the Remove operation).
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Helpers.GetValueResult.PropertyValue">
            <summary>
            The value of the property we're trying to get
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Helpers.GetValueResult.HasError">
            <summary>
            HasError: true when an error occurred, the operation didn't complete successfully
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.JsonPatch.JsonPatchProperty">
            <summary>
            Metadata for JsonProperty.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchProperty.#ctor(Newtonsoft.Json.Serialization.JsonProperty,System.Object)">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.JsonPatchProperty.Property">
            <summary>
            Gets or sets JsonProperty.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.JsonPatchProperty.Parent">
            <summary>
            Gets or sets Parent.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.JsonPatch.Internal.ConversionResult">
            <summary>
            This API supports infrastructure and is not intended to be used
            directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.JsonPatch.Internal.ConversionResultProvider">
            <summary>
            This API supports infrastructure and is not intended to be used
            directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.JsonPatch.Internal.DictionaryAdapter`2">
            <summary>
            This API supports infrastructure and is not intended to be used
            directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.JsonPatch.Internal.DynamicObjectAdapter">
            <summary>
            This API supports infrastructure and is not intended to be used
            directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.JsonPatch.Internal.IAdapter">
            <summary>
            This API supports infrastructure and is not intended to be used
            directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.JsonPatch.Internal.ListAdapter">
            <summary>
            This API supports infrastructure and is not intended to be used
            directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.JsonPatch.Internal.ListAdapter.PositionInfo">
            <summary>
            This API supports infrastructure and is not intended to be used
            directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.JsonPatch.Internal.ListAdapter.PositionType">
            <summary>
            This API supports infrastructure and is not intended to be used
            directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.JsonPatch.Internal.ListAdapter.OperationType">
            <summary>
            This API supports infrastructure and is not intended to be used
            directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.JsonPatch.Internal.ObjectVisitor">
            <summary>
            This API supports infrastructure and is not intended to be used
            directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Internal.ObjectVisitor.#ctor(Microsoft.AspNetCore.JsonPatch.Internal.ParsedPath,Newtonsoft.Json.Serialization.IContractResolver)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.AspNetCore.JsonPatch.Internal.ObjectVisitor"/>.
            </summary>
            <param name="path">The path of the JsonPatch operation</param>
            <param name="contractResolver">The <see cref="T:Newtonsoft.Json.Serialization.IContractResolver"/>.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Internal.ObjectVisitor.#ctor(Microsoft.AspNetCore.JsonPatch.Internal.ParsedPath,Newtonsoft.Json.Serialization.IContractResolver,Microsoft.AspNetCore.JsonPatch.Adapters.IAdapterFactory)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.AspNetCore.JsonPatch.Internal.ObjectVisitor"/>.
            </summary>
            <param name="path">The path of the JsonPatch operation</param>
            <param name="contractResolver">The <see cref="T:Newtonsoft.Json.Serialization.IContractResolver"/>.</param>
            <param name="adapterFactory">The <see cref="T:Microsoft.AspNetCore.JsonPatch.Adapters.IAdapterFactory"/> to use when creating adaptors.</param>
        </member>
        <member name="T:Microsoft.AspNetCore.JsonPatch.Internal.ParsedPath">
            <summary>
            This API supports infrastructure and is not intended to be used
            directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.JsonPatch.Internal.PocoAdapter">
            <summary>
            This API supports infrastructure and is not intended to be used
            directly from your code. This API may change or be removed in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument.Add(System.String,System.Object)">
            <summary>
            Add operation.  Will result in, for example,
            { "op": "add", "path": "/a/b/c", "value": [ "foo", "bar" ] }
            </summary>
            <param name="path">target location</param>
            <param name="value">value</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument.Remove(System.String)">
            <summary>
            Remove value at target location.  Will result in, for example,
            { "op": "remove", "path": "/a/b/c" }
            </summary>
            <param name="path">target location</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument.Replace(System.String,System.Object)">
            <summary>
            Replace value.  Will result in, for example,
            { "op": "replace", "path": "/a/b/c", "value": 42 }
            </summary>
            <param name="path">target location</param>
            <param name="value">value</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument.Test(System.String,System.Object)">
            <summary>
            Test value.  Will result in, for example,
            { "op": "test", "path": "/a/b/c", "value": 42 }
            </summary>
            <param name="path">target location</param>
            <param name="value">value</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument.Move(System.String,System.String)">
            <summary>
            Removes value at specified location and add it to the target location.  Will result in, for example:
            { "op": "move", "from": "/a/b/c", "path": "/a/b/d" }
            </summary>
            <param name="from">source location</param>
            <param name="path">target location</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument.Copy(System.String,System.String)">
            <summary>
            Copy the value at specified location to the target location.  Will result in, for example:
            { "op": "copy", "from": "/a/b/c", "path": "/a/b/e" }
            </summary>
            <param name="from">source location</param>
            <param name="path">target location</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument.ApplyTo(System.Object)">
            <summary>
            Apply this JsonPatchDocument
            </summary>
            <param name="objectToApplyTo">Object to apply the JsonPatchDocument to</param>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument.ApplyTo(System.Object,System.Action{Microsoft.AspNetCore.JsonPatch.JsonPatchError})">
            <summary>
            Apply this JsonPatchDocument
            </summary>
            <param name="objectToApplyTo">Object to apply the JsonPatchDocument to</param>
            <param name="logErrorAction">Action to log errors</param>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument.ApplyTo(System.Object,Microsoft.AspNetCore.JsonPatch.Adapters.IObjectAdapter,System.Action{Microsoft.AspNetCore.JsonPatch.JsonPatchError})">
            <summary>
            Apply this JsonPatchDocument
            </summary>
            <param name="objectToApplyTo">Object to apply the JsonPatchDocument to</param>
            <param name="adapter">IObjectAdapter instance to use when applying</param>
            <param name="logErrorAction">Action to log errors</param>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument.ApplyTo(System.Object,Microsoft.AspNetCore.JsonPatch.Adapters.IObjectAdapter)">
            <summary>
            Apply this JsonPatchDocument
            </summary>
            <param name="objectToApplyTo">Object to apply the JsonPatchDocument to</param>
            <param name="adapter">IObjectAdapter instance to use when applying</param>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Add``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            Add operation.  Will result in, for example,
            { "op": "add", "path": "/a/b/c", "value": [ "foo", "bar" ] }
            </summary>
            <typeparam name="TProp">value type</typeparam>
            <param name="path">target location</param>
            <param name="value">value</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Add``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},``0,System.Int32)">
            <summary>
            Add value to list at given position
            </summary>
            <typeparam name="TProp">value type</typeparam>
            <param name="path">target location</param>
            <param name="value">value</param>
            <param name="position">position</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Add``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},``0)">
            <summary>
            Add value to the end of the list
            </summary>
            <typeparam name="TProp">value type</typeparam>
            <param name="path">target location</param>
            <param name="value">value</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Remove``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Remove value at target location.  Will result in, for example,
            { "op": "remove", "path": "/a/b/c" }
            </summary>
            <param name="path">target location</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Remove``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32)">
            <summary>
            Remove value from list at given position
            </summary>
            <typeparam name="TProp">value type</typeparam>
            <param name="path">target location</param>
            <param name="position">position</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Remove``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}})">
            <summary>
            Remove value from end of list
            </summary>
            <typeparam name="TProp">value type</typeparam>
            <param name="path">target location</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Replace``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            Replace value.  Will result in, for example,
            { "op": "replace", "path": "/a/b/c", "value": 42 }
            </summary>
            <param name="path">target location</param>
            <param name="value">value</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Replace``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},``0,System.Int32)">
            <summary>
            Replace value in a list at given position
            </summary>
            <typeparam name="TProp">value type</typeparam>
            <param name="path">target location</param>
            <param name="value">value</param>
            <param name="position">position</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Replace``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},``0)">
            <summary>
            Replace value at end of a list
            </summary>
            <typeparam name="TProp">value type</typeparam>
            <param name="path">target location</param>
            <param name="value">value</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Test``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            Test value.  Will result in, for example,
            { "op": "test", "path": "/a/b/c", "value": 42 }
            </summary>
            <param name="path">target location</param>
            <param name="value">value</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Test``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},``0,System.Int32)">
            <summary>
            Test value in a list at given position
            </summary>
            <typeparam name="TProp">value type</typeparam>
            <param name="path">target location</param>
            <param name="value">value</param>
            <param name="position">position</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Test``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},``0)">
            <summary>
            Test value at end of a list
            </summary>
            <typeparam name="TProp">value type</typeparam>
            <param name="path">target location</param>
            <param name="value">value</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Move``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Removes value at specified location and add it to the target location.  Will result in, for example:
            { "op": "move", "from": "/a/b/c", "path": "/a/b/d" }
            </summary>
            <param name="from">source location</param>
            <param name="path">target location</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Move``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Move from a position in a list to a new location
            </summary>
            <typeparam name="TProp"></typeparam>
            <param name="from">source location</param>
            <param name="positionFrom">position</param>
            <param name="path">target location</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Move``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32)">
            <summary>
            Move from a property to a location in a list
            </summary>
            <typeparam name="TProp"></typeparam>
            <param name="from">source location</param>
            <param name="path">target location</param>
            <param name="positionTo">position</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Move``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32)">
            <summary>
            Move from a position in a list to another location in a list
            </summary>
            <typeparam name="TProp"></typeparam>
            <param name="from">source location</param>
            <param name="positionFrom">position (source)</param>
            <param name="path">target location</param>
            <param name="positionTo">position (target)</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Move``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}})">
            <summary>
            Move from a position in a list to the end of another list
            </summary>
            <typeparam name="TProp"></typeparam>
            <param name="from">source location</param>
            <param name="positionFrom">position</param>
            <param name="path">target location</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Move``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}})">
            <summary>
            Move to the end of a list
            </summary>
            <typeparam name="TProp"></typeparam>
            <param name="from">source location</param>
            <param name="path">target location</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Copy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Copy the value at specified location to the target location.  Will result in, for example:
            { "op": "copy", "from": "/a/b/c", "path": "/a/b/e" }
            </summary>
            <param name="from">source location</param>
            <param name="path">target location</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Copy``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Copy from a position in a list to a new location
            </summary>
            <typeparam name="TProp"></typeparam>
            <param name="from">source location</param>
            <param name="positionFrom">position</param>
            <param name="path">target location</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Copy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32)">
            <summary>
            Copy from a property to a location in a list
            </summary>
            <typeparam name="TProp"></typeparam>
            <param name="from">source location</param>
            <param name="path">target location</param>
            <param name="positionTo">position</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Copy``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32)">
            <summary>
            Copy from a position in a list to a new location in a list
            </summary>
            <typeparam name="TProp"></typeparam>
            <param name="from">source location</param>
            <param name="positionFrom">position (source)</param>
            <param name="path">target location</param>
            <param name="positionTo">position (target)</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Copy``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}})">
            <summary>
            Copy from a position in a list to the end of another list
            </summary>
            <typeparam name="TProp"></typeparam>
            <param name="from">source location</param>
            <param name="positionFrom">position</param>
            <param name="path">target location</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Copy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}})">
            <summary>
            Copy to the end of a list
            </summary>
            <typeparam name="TProp"></typeparam>
            <param name="from">source location</param>
            <param name="path">target location</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1"/> for chaining.</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.ApplyTo(`0)">
            <summary>
            Apply this JsonPatchDocument
            </summary>
            <param name="objectToApplyTo">Object to apply the JsonPatchDocument to</param>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.ApplyTo(`0,System.Action{Microsoft.AspNetCore.JsonPatch.JsonPatchError})">
            <summary>
            Apply this JsonPatchDocument
            </summary>
            <param name="objectToApplyTo">Object to apply the JsonPatchDocument to</param>
            <param name="logErrorAction">Action to log errors</param>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.ApplyTo(`0,Microsoft.AspNetCore.JsonPatch.Adapters.IObjectAdapter,System.Action{Microsoft.AspNetCore.JsonPatch.JsonPatchError})">
            <summary>
            Apply this JsonPatchDocument
            </summary>
            <param name="objectToApplyTo">Object to apply the JsonPatchDocument to</param>
            <param name="adapter">IObjectAdapter instance to use when applying</param>
            <param name="logErrorAction">Action to log errors</param>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.ApplyTo(`0,Microsoft.AspNetCore.JsonPatch.Adapters.IObjectAdapter)">
            <summary>
            Apply this JsonPatchDocument
            </summary>
            <param name="objectToApplyTo">Object to apply the JsonPatchDocument to</param>
            <param name="adapter">IObjectAdapter instance to use when applying</param>
        </member>
        <member name="T:Microsoft.AspNetCore.JsonPatch.JsonPatchError">
            <summary>
            Captures error message and the related entity and the operation that caused it.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.JsonPatchError.#ctor(System.Object,Microsoft.AspNetCore.JsonPatch.Operations.Operation,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.AspNetCore.JsonPatch.JsonPatchError"/>.
            </summary>
            <param name="affectedObject">The object that is affected by the error.</param>
            <param name="operation">The <see cref="P:Microsoft.AspNetCore.JsonPatch.JsonPatchError.Operation"/> that caused the error.</param>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.JsonPatchError.AffectedObject">
            <summary>
            Gets the object that is affected by the error.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.JsonPatchError.Operation">
            <summary>
            Gets the <see cref="P:Microsoft.AspNetCore.JsonPatch.JsonPatchError.Operation"/> that caused the error.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.JsonPatchError.ErrorMessage">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Resources.CannotCopyProperty">
            <summary>The property at '{0}' could not be copied.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Resources.FormatCannotCopyProperty(System.Object)">
            <summary>The property at '{0}' could not be copied.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Resources.CannotDeterminePropertyType">
            <summary>The type of the property at path '{0}' could not be determined.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Resources.FormatCannotDeterminePropertyType(System.Object)">
            <summary>The type of the property at path '{0}' could not be determined.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Resources.CannotPerformOperation">
            <summary>The '{0}' operation at path '{1}' could not be performed.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Resources.FormatCannotPerformOperation(System.Object,System.Object)">
            <summary>The '{0}' operation at path '{1}' could not be performed.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Resources.CannotReadProperty">
            <summary>The property at '{0}' could not be read.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Resources.FormatCannotReadProperty(System.Object)">
            <summary>The property at '{0}' could not be read.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Resources.CannotUpdateProperty">
            <summary>The property at path '{0}' could not be updated.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Resources.FormatCannotUpdateProperty(System.Object)">
            <summary>The property at path '{0}' could not be updated.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Resources.ExpressionTypeNotSupported">
            <summary>The expression '{0}' is not supported. Supported expressions include member access and indexer expressions.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Resources.FormatExpressionTypeNotSupported(System.Object)">
            <summary>The expression '{0}' is not supported. Supported expressions include member access and indexer expressions.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Resources.IndexOutOfBounds">
            <summary>The index value provided by path segment '{0}' is out of bounds of the array size.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Resources.FormatIndexOutOfBounds(System.Object)">
            <summary>The index value provided by path segment '{0}' is out of bounds of the array size.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Resources.InvalidIndexValue">
            <summary>The path segment '{0}' is invalid for an array index.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Resources.FormatInvalidIndexValue(System.Object)">
            <summary>The path segment '{0}' is invalid for an array index.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Resources.InvalidJsonPatchDocument">
            <summary>The JSON patch document was malformed and could not be parsed.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Resources.InvalidJsonPatchOperation">
            <summary>Invalid JsonPatch operation '{0}'.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Resources.FormatInvalidJsonPatchOperation(System.Object)">
            <summary>Invalid JsonPatch operation '{0}'.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Resources.InvalidPathSegment">
            <summary>The provided path segment '{0}' cannot be converted to the target type.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Resources.FormatInvalidPathSegment(System.Object)">
            <summary>The provided path segment '{0}' cannot be converted to the target type.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Resources.InvalidValueForPath">
            <summary>The provided string '{0}' is an invalid path.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Resources.FormatInvalidValueForPath(System.Object)">
            <summary>The provided string '{0}' is an invalid path.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Resources.InvalidValueForProperty">
            <summary>The value '{0}' is invalid for target location.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Resources.FormatInvalidValueForProperty(System.Object)">
            <summary>The value '{0}' is invalid for target location.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Resources.ParameterMustMatchType">
            <summary>'{0}' must be of type '{1}'.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Resources.FormatParameterMustMatchType(System.Object,System.Object)">
            <summary>'{0}' must be of type '{1}'.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Resources.PatchNotSupportedForArrays">
            <summary>The type '{0}' which is an array is not supported for json patch operations as it has a fixed size.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Resources.FormatPatchNotSupportedForArrays(System.Object)">
            <summary>The type '{0}' which is an array is not supported for json patch operations as it has a fixed size.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Resources.PatchNotSupportedForNonGenericLists">
            <summary>The type '{0}' which is a non generic list is not supported for json patch operations. Only generic list types are supported.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Resources.FormatPatchNotSupportedForNonGenericLists(System.Object)">
            <summary>The type '{0}' which is a non generic list is not supported for json patch operations. Only generic list types are supported.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Resources.TargetLocationAtPathSegmentNotFound">
            <summary>The target location specified by path segment '{0}' was not found.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Resources.FormatTargetLocationAtPathSegmentNotFound(System.Object)">
            <summary>The target location specified by path segment '{0}' was not found.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Resources.TargetLocationNotFound">
            <summary>For operation '{0}', the target location specified by path '{1}' was not found.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Resources.FormatTargetLocationNotFound(System.Object,System.Object)">
            <summary>For operation '{0}', the target location specified by path '{1}' was not found.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Resources.TestOperationNotSupported">
            <summary>The test operation is not supported.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Resources.ValueAtListPositionNotEqualToTestValue">
            <summary>The current value '{0}' at position '{2}' is not equal to the test value '{1}'.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Resources.FormatValueAtListPositionNotEqualToTestValue(System.Object,System.Object,System.Object)">
            <summary>The current value '{0}' at position '{2}' is not equal to the test value '{1}'.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Resources.ValueForTargetSegmentCannotBeNullOrEmpty">
            <summary>The value at '{0}' cannot be null or empty to perform the test operation.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Resources.FormatValueForTargetSegmentCannotBeNullOrEmpty(System.Object)">
            <summary>The value at '{0}' cannot be null or empty to perform the test operation.</summary>
        </member>
        <member name="P:Microsoft.AspNetCore.JsonPatch.Resources.ValueNotEqualToTestValue">
            <summary>The current value '{0}' at path '{2}' is not equal to the test value '{1}'.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.JsonPatch.Resources.FormatValueNotEqualToTestValue(System.Object,System.Object,System.Object)">
            <summary>The current value '{0}' at path '{2}' is not equal to the test value '{1}'.</summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Shared.ArgumentNullThrowHelper.ThrowIfNull(System.Object,System.String)">
            <summary>Throws an <see cref="T:System.ArgumentNullException"/> if <paramref name="argument"/> is null.</summary>
            <param name="argument">The reference type argument to validate as non-null.</param>
            <param name="paramName">The name of the parameter with which <paramref name="argument"/> corresponds.</param>
        </member>
        <member name="T:Microsoft.Extensions.Internal.ClosedGenericMatcher">
            <summary>
            Helper related to generic interface definitions and implementing classes.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Internal.ClosedGenericMatcher.ExtractGenericInterface(System.Type,System.Type)">
            <summary>
            Determine whether <paramref name="queryType"/> is or implements a closed generic <see cref="T:System.Type"/>
            created from <paramref name="interfaceType"/>.
            </summary>
            <param name="queryType">The <see cref="T:System.Type"/> of interest.</param>
            <param name="interfaceType">The open generic <see cref="T:System.Type"/> to match. Usually an interface.</param>
            <returns>
            The closed generic <see cref="T:System.Type"/> created from <paramref name="interfaceType"/> that
            <paramref name="queryType"/> is or implements. <c>null</c> if the two <see cref="T:System.Type"/>s have no such
            relationship.
            </returns>
            <remarks>
            This method will return <paramref name="queryType"/> if <paramref name="interfaceType"/> is
            <c>typeof(KeyValuePair{,})</c>, and <paramref name="queryType"/> is
            <c>typeof(KeyValuePair{string, object})</c>.
            </remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it. Specifies that an input argument was not null when the call returns.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with a field or property member.</summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>Initializes the attribute with the list of field and property members.</summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>Initializes the attribute with the specified return value condition and a field or property member.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>Initializes the attribute with the specified return value condition and list of field and property members.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute">
            <summary>
            Indicates that the specified method requires dynamic access to code that is not referenced
            statically, for example through <see cref="N:System.Reflection"/>.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when removing unreferenced
            code from an application.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of unreferenced code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of unreferenced code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires unreferenced code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute">
            <summary>
            Indicates that the specified method requires the ability to generate new code at runtime,
            for example through <see cref="N:System.Reflection"/>.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when compiling ahead of time.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of dynamic code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of dynamic code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires dynamic code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute">
            <summary>
            Suppresses reporting of a specific rule violation, allowing multiple suppressions on a
            single code artifact.
            </summary>
            <remarks>
            <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/> is different than
            <see cref="T:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"/> in that it doesn't have a
            <see cref="T:System.Diagnostics.ConditionalAttribute"/>. So it is always preserved in the compiled assembly.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/>
            class, specifying the category of the tool and the identifier for an analysis rule.
            </summary>
            <param name="category">The category for the attribute.</param>
            <param name="checkId">The identifier of the analysis rule the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category">
            <summary>
            Gets the category identifying the classification of the attribute.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category"/> property describes the tool or tool analysis category
            for which a message suppression attribute applies.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId">
            <summary>
            Gets the identifier of the analysis tool rule to be suppressed.
            </summary>
            <remarks>
            Concatenated together, the <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category"/> and <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId"/>
            properties form a unique check identifier.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Scope">
            <summary>
            Gets or sets the scope of the code that is relevant for the attribute.
            </summary>
            <remarks>
            The Scope property is an optional argument that specifies the metadata scope for which
            the attribute is relevant.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target">
            <summary>
            Gets or sets a fully qualified path that represents the target of the attribute.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target"/> property is an optional argument identifying the analysis target
            of the attribute. An example value is "System.IO.Stream.ctor():System.Void".
            Because it is fully qualified, it can be long, particularly for targets such as parameters.
            The analysis tool user interface should be capable of automatically formatting the parameter.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId">
            <summary>
            Gets or sets an optional argument expanding on exclusion criteria.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId"/> property is an optional argument that specifies additional
            exclusion where the literal metadata target is not sufficiently precise. For example,
            the <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/> cannot be applied within a method,
            and it may be desirable to suppress a violation against a statement in the method that will
            give a rule violation, but not against all statements in the method.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Justification">
            <summary>
            Gets or sets the justification for suppressing the code analysis message.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute">
            <summary>
            States a dependency that one member has on another.
            </summary>
            <remarks>
            This can be used to inform tooling of a dependency that is otherwise not evident purely from
            metadata and IL, for example a member relied on via reflection.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified signature of a member on the same type as the consumer.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified signature of a member on a <see cref="T:System.Type"/>.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
            <param name="type">The <see cref="T:System.Type"/> containing <paramref name="memberSignature"/>.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified signature of a member on a type in an assembly.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
            <param name="typeName">The full name of the type containing the specified member.</param>
            <param name="assemblyName">The assembly name of the type containing the specified member.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified types of members on a <see cref="T:System.Type"/>.
            </summary>
            <param name="memberTypes">The types of members depended on.</param>
            <param name="type">The <see cref="T:System.Type"/> containing the specified members.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified types of members on a type in an assembly.
            </summary>
            <param name="memberTypes">The types of members depended on.</param>
            <param name="typeName">The full name of the type containing the specified members.</param>
            <param name="assemblyName">The assembly name of the type containing the specified members.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature">
            <summary>
            Gets the signature of the member depended on.
            </summary>
            <remarks>
            Either <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature"/> must be a valid string or <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes"/>
            must not equal <see cref="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None"/>, but not both.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes">
            <summary>
            Gets the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes"/> which specifies the type
            of members depended on.
            </summary>
            <remarks>
            Either <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature"/> must be a valid string or <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes"/>
            must not equal <see cref="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None"/>, but not both.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type">
            <summary>
            Gets the <see cref="T:System.Type"/> containing the specified member.
            </summary>
            <remarks>
            If neither <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type"/> nor <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName"/> are specified,
            the type of the consumer is assumed.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName">
            <summary>
            Gets the full name of the type containing the specified member.
            </summary>
            <remarks>
            If neither <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type"/> nor <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName"/> are specified,
            the type of the consumer is assumed.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.AssemblyName">
            <summary>
            Gets the assembly name of the specified type.
            </summary>
            <remarks>
            <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.AssemblyName"/> is only valid when <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName"/> is specified.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Condition">
            <summary>
            Gets or sets the condition in which the dependency is applicable, e.g. "DEBUG".
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute">
             <summary>
             Indicates that certain members on a specified <see cref="T:System.Type"/> are accessed dynamically,
             for example through <see cref="N:System.Reflection"/>.
             </summary>
             <remarks>
             This allows tools to understand which members are being accessed during the execution
             of a program.
            
             This attribute is valid on members whose type is <see cref="T:System.Type"/> or <see cref="T:System.String"/>.
            
             When this attribute is applied to a location of type <see cref="T:System.String"/>, the assumption is
             that the string represents a fully qualified type name.
            
             When this attribute is applied to a class, interface, or struct, the members specified
             can be accessed dynamically on <see cref="T:System.Type"/> instances returned from calling
             <see cref="M:System.Object.GetType"/> on instances of that class, interface, or struct.
            
             If the attribute is applied to a method it's treated as a special case and it implies
             the attribute should be applied to the "this" parameter of the method. As such the attribute
             should only be used on instance methods of types assignable to System.Type (or string, but no methods
             will use it there).
             </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute"/> class
            with the specified member types.
            </summary>
            <param name="memberTypes">The types of members dynamically accessed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.MemberTypes">
            <summary>
            Gets the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes"/> which specifies the type
            of members dynamically accessed.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes">
             <summary>
             Specifies the types of members that are dynamically accessed.
            
             This enumeration has a <see cref="T:System.FlagsAttribute"/> attribute that allows a
             bitwise combination of its member values.
             </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None">
            <summary>
            Specifies no members.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor">
            <summary>
            Specifies the default, parameterless public constructor.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors">
            <summary>
            Specifies all public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicConstructors">
            <summary>
            Specifies all non-public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicMethods">
            <summary>
            Specifies all public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicMethods">
            <summary>
            Specifies all non-public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields">
            <summary>
            Specifies all public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicFields">
            <summary>
            Specifies all non-public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicNestedTypes">
            <summary>
            Specifies all public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicNestedTypes">
            <summary>
            Specifies all non-public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties">
            <summary>
            Specifies all public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicProperties">
            <summary>
            Specifies all non-public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicEvents">
            <summary>
            Specifies all public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicEvents">
            <summary>
            Specifies all non-public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.Interfaces">
            <summary>
            Specifies all interfaces implemented by the type.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.All">
            <summary>
            Specifies all members.
            </summary>
        </member>
    </members>
</doc>
